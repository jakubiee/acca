{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AC/CA","text":"<p>WIP</p>"},{"location":"AD5282/","title":"AD5282","text":"<p>               Bases: <code>I2C_ACCA</code></p> <p>A class to interface with the AD5282 digital potentiometer via I2C.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The I2C bus ID. Defaults to 1.</p> <code>1</code> <code>sda_pin</code> <code>Pin</code> <p>The pin used for SDA. Defaults to Pin(7).</p> <code>Pin(7)</code> <code>scl_pin</code> <code>Pin</code> <p>The pin used for SCL. Defaults to Pin(6).</p> <code>Pin(6)</code> <code>baudrate</code> <code>int</code> <p>The communication baud rate. Defaults to 100000.</p> <code>100000</code> Example <p>ad5282 = AD5282(1, Pin(7), Pin(6), 100000)</p> Source code in <code>acca.py</code> <pre><code>class AD5282(I2C_ACCA):\n    \"\"\"\n    A class to interface with the AD5282 digital potentiometer via I2C.\n\n    Args:\n        id (int, optional): The I2C bus ID. Defaults to 1.\n        sda_pin (Pin, optional): The pin used for SDA. Defaults to Pin(7).\n        scl_pin (Pin, optional): The pin used for SCL. Defaults to Pin(6).\n        baudrate (int, optional): The communication baud rate. Defaults to 100000.\n\n    Example:\n        ad5282 = AD5282(1, Pin(7), Pin(6), 100000)\n    \"\"\"\n\n    def __init__(self, id: int = 1, sda_pin: Pin = Pin(7), scl_pin: Pin = Pin(6), baudrate: int = 100000):\n        super().__init__(id, sda_pin, scl_pin, baudrate)\n\n    def set_value(self, MSB: int, LSB: int):\n        \"\"\"\n        Sets the value of the AD5282 digital potentiometer.\n\n        Args:\n            MSB (int): The most significant byte of the value.\n            LSB (int): The least significant byte of the value.\n\n        Returns:\n            int: The result of the send operation.\n\n        Raises:\n            Exception: If there is an error setting the value.\n        \"\"\"\n        try:\n            return self.send(bytearray([MSB, LSB]))\n        except Exception as e:\n            print(f\"Failed to set value: {e}\")\n</code></pre>"},{"location":"AD5282/#acca.AD5282.set_value","title":"<code>set_value(MSB, LSB)</code>","text":"<p>Sets the value of the AD5282 digital potentiometer.</p> <p>Parameters:</p> Name Type Description Default <code>MSB</code> <code>int</code> <p>The most significant byte of the value.</p> required <code>LSB</code> <code>int</code> <p>The least significant byte of the value.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>The result of the send operation.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If there is an error setting the value.</p> Source code in <code>acca.py</code> <pre><code>def set_value(self, MSB: int, LSB: int):\n    \"\"\"\n    Sets the value of the AD5282 digital potentiometer.\n\n    Args:\n        MSB (int): The most significant byte of the value.\n        LSB (int): The least significant byte of the value.\n\n    Returns:\n        int: The result of the send operation.\n\n    Raises:\n        Exception: If there is an error setting the value.\n    \"\"\"\n    try:\n        return self.send(bytearray([MSB, LSB]))\n    except Exception as e:\n        print(f\"Failed to set value: {e}\")\n</code></pre>"},{"location":"AD7801_I2C/","title":"AD7801 (I2C)","text":"<p>               Bases: <code>I2C_ACCA</code></p> <p>A class to interface with the AD7801 digital-to-analog converter via I2C.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The I2C bus ID.</p> required <code>sda_pin</code> <code>Pin</code> <p>The pin used for SDA.</p> required <code>scl_pin</code> <code>Pin</code> <p>The pin used for SCL.</p> required <code>baudrate</code> <code>int</code> <p>The communication baud rate. Defaults to 400000.</p> <code>400000</code> Source code in <code>acca.py</code> <pre><code>class AD7801_I2C(I2C_ACCA):\n    \"\"\"\n    A class to interface with the AD7801 digital-to-analog converter via I2C.\n\n    Args:\n        id (int): The I2C bus ID.\n        sda_pin (Pin): The pin used for SDA.\n        scl_pin (Pin): The pin used for SCL.\n        baudrate (int, optional): The communication baud rate. Defaults to 400000.\n    \"\"\"\n\n    def __init__(\n        self,\n        id: int,\n        sda_pin: Pin,\n        scl_pin: Pin,\n        baudrate: int = 400000,\n    ) -&gt; None:\n        super().__init__(id=id, sda_pin=sda_pin, scl_pin=scl_pin, baudrate=baudrate)\n\n    def set_value(self, channel: int, value: int):\n        \"\"\"\n        Sets the value of the AD7801 digital-to-analog converter.\n\n        Args:\n            channel (int): The channel to set.\n            value (int): The value to set.\n\n        Returns:\n            int: The result of the send operation.\n\n        Raises:\n            Exception: If there is an error setting the value.\n        \"\"\"\n        try:\n            return self.send(bytearray([channel, value]))\n        except Exception as e:\n            print(f\"Failed to set value: {e}\")\n</code></pre>"},{"location":"AD7801_I2C/#acca.AD7801_I2C.set_value","title":"<code>set_value(channel, value)</code>","text":"<p>Sets the value of the AD7801 digital-to-analog converter.</p> <p>Parameters:</p> Name Type Description Default <code>channel</code> <code>int</code> <p>The channel to set.</p> required <code>value</code> <code>int</code> <p>The value to set.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>The result of the send operation.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If there is an error setting the value.</p> Source code in <code>acca.py</code> <pre><code>def set_value(self, channel: int, value: int):\n    \"\"\"\n    Sets the value of the AD7801 digital-to-analog converter.\n\n    Args:\n        channel (int): The channel to set.\n        value (int): The value to set.\n\n    Returns:\n        int: The result of the send operation.\n\n    Raises:\n        Exception: If there is an error setting the value.\n    \"\"\"\n    try:\n        return self.send(bytearray([channel, value]))\n    except Exception as e:\n        print(f\"Failed to set value: {e}\")\n</code></pre>"},{"location":"AD7801_Parallel/","title":"AD7801 (PARALLEL INTERFACE)","text":"<p>A class to interface with the AD7801 digital-to-analog converter via parallel interface.</p> <p>Parameters:</p> Name Type Description Default <code>b0-b7</code> <code>int</code> <p>Pins for data bits (8 pins).</p> required <code>wr_pin</code> <code>int</code> <p>Pin used for the WR signal.</p> <code>14</code> <code>freq</code> <code>int</code> <p>Frequency for the state machine. Defaults to 10000000.</p> <code>10000000</code> Source code in <code>acca.py</code> <pre><code>class AD7801_PARALLEL:\n    \"\"\"\n    A class to interface with the AD7801 digital-to-analog converter via parallel interface.\n\n    Args:\n        b0-b7 (int): Pins for data bits (8 pins).\n        wr_pin (int): Pin used for the WR signal.\n        freq (int, optional): Frequency for the state machine. Defaults to 10000000.\n    \"\"\"\n\n    def __init__(\n        self,\n        b0: int = 6,\n        b1: int = 7,\n        b2: int = 8,\n        b3: int = 9,\n        b4: int = 10,\n        b5: int = 11,\n        b6: int = 12,\n        b7: int = 13,\n        wr_pin: int = 14,\n        freq: int = 10000000\n    ):\n        self.freq = freq\n        self.data_pins = [\n            Pin(b0, Pin.OUT),\n            Pin(b1, Pin.OUT),\n            Pin(b2, Pin.OUT),\n            Pin(b3, Pin.OUT),\n            Pin(b4, Pin.OUT),\n            Pin(b5, Pin.OUT),\n            Pin(b6, Pin.OUT),\n            Pin(b7, Pin.OUT)\n        ]\n        self.wr_pin = Pin(wr_pin, Pin.OUT)\n\n        @rp2.asm_pio(set_init=(rp2.PIO.OUT_HIGH, rp2.PIO.OUT_HIGH),\n                     out_init=(rp2.PIO.OUT_LOW,) * 8, out_shiftdir=rp2.PIO.SHIFT_RIGHT)\n        def smproc():\n            wrap_target()\n            pull()\n            out(pins, 8)\n            set(pins, 0b00) [5]\n            set(pins, 0b11)\n            wrap()\n\n        self.sm = rp2.StateMachine(0, smproc, freq=freq, set_base=self.wr_pin, out_base=self.data_pins[0])\n        self.sm.active(1)\n        self.sm.put(0)\n\n    def set_value(self, value: int):\n        \"\"\"\n        Sets the DAC value.\n\n        Args:\n            value (int): 8-bit value to be set on the DAC.\n\n        Raises:\n            ValueError: If the value is not between 0 and 255.\n        \"\"\"\n        if not (0 &lt;= value &lt;= 255):\n            raise ValueError(\"Value must be between 0 and 255\")\n        self.sm.put(value)\n        time.sleep_us(1)\n\n    def show_parameters(self):\n        \"\"\"\n        Prints the AD7801 parameters.\n        \"\"\"\n        print(\n            f\"Data pins: {[pin for pin in self.data_pins]}\\nWR pin: {self.wr_pin}\\nState Machine Frequency: {self.freq} Hz\"\n        )\n</code></pre>"},{"location":"AD7801_Parallel/#acca.AD7801_PARALLEL.set_value","title":"<code>set_value(value)</code>","text":"<p>Sets the DAC value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>int</code> <p>8-bit value to be set on the DAC.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the value is not between 0 and 255.</p> Source code in <code>acca.py</code> <pre><code>def set_value(self, value: int):\n    \"\"\"\n    Sets the DAC value.\n\n    Args:\n        value (int): 8-bit value to be set on the DAC.\n\n    Raises:\n        ValueError: If the value is not between 0 and 255.\n    \"\"\"\n    if not (0 &lt;= value &lt;= 255):\n        raise ValueError(\"Value must be between 0 and 255\")\n    self.sm.put(value)\n    time.sleep_us(1)\n</code></pre>"},{"location":"AD7801_Parallel/#acca.AD7801_PARALLEL.show_parameters","title":"<code>show_parameters()</code>","text":"<p>Prints the AD7801 parameters.</p> Source code in <code>acca.py</code> <pre><code>def show_parameters(self):\n    \"\"\"\n    Prints the AD7801 parameters.\n    \"\"\"\n    print(\n        f\"Data pins: {[pin for pin in self.data_pins]}\\nWR pin: {self.wr_pin}\\nState Machine Frequency: {self.freq} Hz\"\n    )\n</code></pre>"},{"location":"AD7819_I2C/","title":"AD7819 (I2C)","text":"<p>               Bases: <code>I2C_ACCA</code></p> <p>A class to interface with the AD7819 analog-to-digital converter via I2C.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The I2C bus ID. Defaults to 0.</p> <code>0</code> <code>sda_pin</code> <code>Pin</code> <p>The pin used for SDA. Defaults to Pin(8).</p> <code>Pin(8)</code> <code>scl_pin</code> <code>Pin</code> <p>The pin used for SCL. Defaults to Pin(9).</p> <code>Pin(9)</code> <code>baudrate</code> <code>int</code> <p>The communication baud rate. Defaults to 400000.</p> <code>400000</code> Source code in <code>acca.py</code> <pre><code>class AD7819_I2C(I2C_ACCA):\n    \"\"\"\n    A class to interface with the AD7819 analog-to-digital converter via I2C.\n\n    Args:\n        id (int, optional): The I2C bus ID. Defaults to 0.\n        sda_pin (Pin, optional): The pin used for SDA. Defaults to Pin(8).\n        scl_pin (Pin, optional): The pin used for SCL. Defaults to Pin(9).\n        baudrate (int, optional): The communication baud rate. Defaults to 400000.\n    \"\"\"\n\n    def __init__(\n        self,\n        id: int = 0,\n        sda_pin: Pin = Pin(8),\n        scl_pin: Pin = Pin(9),\n        baudrate: int = 400000,\n    ) -&gt; None:\n        super().__init__(id=id, sda_pin=sda_pin, scl_pin=scl_pin, baudrate=baudrate)\n        self.set_pins()\n\n    def set_pins(\n        self, conv_pin: int = 13, rd_pin: int = 11, cs_pin: int = 10, busy_pin: int = 13\n    ):\n        \"\"\"\n        Sets the control pins for the AD7819.\n\n        Args:\n            conv_pin (int): The pin used for CONV signal.\n            rd_pin (int): The pin used for RD signal.\n            cs_pin (int): The pin used for CS signal.\n            busy_pin (int): The pin used for BUSY signal.\n        \"\"\"\n        self.conv_pin = Pin(conv_pin, Pin.OUT)\n        self.rd_pin = Pin(rd_pin, Pin.OUT)\n        self.cs_pin = Pin(cs_pin, Pin.OUT)\n        self.busy_pin = Pin(busy_pin, Pin.OUT)\n\n    def _set_high(self):\n        \"\"\"\n        Sets the control pins to high.\n        \"\"\"\n        self.conv_pin.value(1)\n        self.rd_pin.value(1)\n        self.cs_pin.value(1)\n        self.busy_pin.value(1)\n\n    def _start_conversion(self):\n        \"\"\"\n        Starts the conversion process.\n        \"\"\"\n        self.conv_pin.value(0)\n        time.sleep_us(1)\n        self.conv_pin.value(1)\n\n    def read_sample(self):\n        \"\"\"\n        Reads data from the AD7819.\n\n        Returns:\n            bytes: The data read from the AD7819.\n        \"\"\"\n        self._set_high()\n        self._start_conversion()\n        self.rd_pin.value(0)\n        self.cs_pin.value(0)\n        message = self.i2c.readfrom(self.addr, 2)\n        time.sleep_us(50)\n        return message\n</code></pre>"},{"location":"AD7819_I2C/#acca.AD7819_I2C.read_sample","title":"<code>read_sample()</code>","text":"<p>Reads data from the AD7819.</p> <p>Returns:</p> Name Type Description <code>bytes</code> <p>The data read from the AD7819.</p> Source code in <code>acca.py</code> <pre><code>def read_sample(self):\n    \"\"\"\n    Reads data from the AD7819.\n\n    Returns:\n        bytes: The data read from the AD7819.\n    \"\"\"\n    self._set_high()\n    self._start_conversion()\n    self.rd_pin.value(0)\n    self.cs_pin.value(0)\n    message = self.i2c.readfrom(self.addr, 2)\n    time.sleep_us(50)\n    return message\n</code></pre>"},{"location":"AD7819_I2C/#acca.AD7819_I2C.set_pins","title":"<code>set_pins(conv_pin=13, rd_pin=11, cs_pin=10, busy_pin=13)</code>","text":"<p>Sets the control pins for the AD7819.</p> <p>Parameters:</p> Name Type Description Default <code>conv_pin</code> <code>int</code> <p>The pin used for CONV signal.</p> <code>13</code> <code>rd_pin</code> <code>int</code> <p>The pin used for RD signal.</p> <code>11</code> <code>cs_pin</code> <code>int</code> <p>The pin used for CS signal.</p> <code>10</code> <code>busy_pin</code> <code>int</code> <p>The pin used for BUSY signal.</p> <code>13</code> Source code in <code>acca.py</code> <pre><code>def set_pins(\n    self, conv_pin: int = 13, rd_pin: int = 11, cs_pin: int = 10, busy_pin: int = 13\n):\n    \"\"\"\n    Sets the control pins for the AD7819.\n\n    Args:\n        conv_pin (int): The pin used for CONV signal.\n        rd_pin (int): The pin used for RD signal.\n        cs_pin (int): The pin used for CS signal.\n        busy_pin (int): The pin used for BUSY signal.\n    \"\"\"\n    self.conv_pin = Pin(conv_pin, Pin.OUT)\n    self.rd_pin = Pin(rd_pin, Pin.OUT)\n    self.cs_pin = Pin(cs_pin, Pin.OUT)\n    self.busy_pin = Pin(busy_pin, Pin.OUT)\n</code></pre>"},{"location":"AD8821/","title":"AD8821","text":"<p>               Bases: <code>I2C_ACCA</code></p> <p>A class to interface with the AD8821 digital potentiometer via I2C.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The I2C bus ID. Defaults to 1.</p> <code>1</code> <code>sda_pin</code> <code>Pin</code> <p>The pin used for SDA. Defaults to Pin(3).</p> <code>Pin(3)</code> <code>scl_pin</code> <code>Pin</code> <p>The pin used for SCL. Defaults to Pin(2).</p> <code>Pin(2)</code> <code>baudrate</code> <code>int</code> <p>The communication baud rate. Defaults to 100000.</p> <code>100000</code> Example <p>ad8821 = AD8821(1, Pin(3), Pin(2), 100000)</p> Source code in <code>acca.py</code> <pre><code>class AD8821(I2C_ACCA):\n    \"\"\"\n    A class to interface with the AD8821 digital potentiometer via I2C.\n\n    Args:\n        id (int, optional): The I2C bus ID. Defaults to 1.\n        sda_pin (Pin, optional): The pin used for SDA. Defaults to Pin(3).\n        scl_pin (Pin, optional): The pin used for SCL. Defaults to Pin(2).\n        baudrate (int, optional): The communication baud rate. Defaults to 100000.\n\n    Example:\n        ad8821 = AD8821(1, Pin(3), Pin(2), 100000)\n    \"\"\"\n\n    def __init__(self, id: int = 1, sda_pin: Pin = Pin(3), scl_pin: Pin = Pin(2), baudrate: int = 100000):\n        super().__init__(id, sda_pin, scl_pin, baudrate)\n\n    def set_value(self, MSB: int, LSB: int):\n        \"\"\"\n        Sets the value of the AD8821 digital potentiometer.\n\n        Args:\n            MSB (int): The most significant byte of the value.\n            LSB (int): The least significant byte of the value.\n\n        Returns:\n            int: The result of the send operation.\n\n        Raises:\n            Exception: If there is an error setting the value.\n        \"\"\"\n        try:\n            return self.send(bytearray([MSB, LSB]))\n        except Exception as e:\n            print(f\"Failed to set value: {e}\")\n</code></pre>"},{"location":"AD8821/#acca.AD8821.set_value","title":"<code>set_value(MSB, LSB)</code>","text":"<p>Sets the value of the AD8821 digital potentiometer.</p> <p>Parameters:</p> Name Type Description Default <code>MSB</code> <code>int</code> <p>The most significant byte of the value.</p> required <code>LSB</code> <code>int</code> <p>The least significant byte of the value.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>The result of the send operation.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If there is an error setting the value.</p> Source code in <code>acca.py</code> <pre><code>def set_value(self, MSB: int, LSB: int):\n    \"\"\"\n    Sets the value of the AD8821 digital potentiometer.\n\n    Args:\n        MSB (int): The most significant byte of the value.\n        LSB (int): The least significant byte of the value.\n\n    Returns:\n        int: The result of the send operation.\n\n    Raises:\n        Exception: If there is an error setting the value.\n    \"\"\"\n    try:\n        return self.send(bytearray([MSB, LSB]))\n    except Exception as e:\n        print(f\"Failed to set value: {e}\")\n</code></pre>"},{"location":"DS18B20/","title":"DS18B20","text":"<p>A class to interface with the DS18B20 temperature sensor via OneWire.</p> <p>Parameters:</p> Name Type Description Default <code>pin</code> <code>Pin</code> <p>The pin used for OneWire communication.</p> required Source code in <code>acca.py</code> <pre><code>class DS18B20_OneWire:\n    \"\"\"\n    A class to interface with the DS18B20 temperature sensor via OneWire.\n\n    Args:\n        pin (Pin): The pin used for OneWire communication.\n    \"\"\"\n\n    def __init__(self, pin: Pin):\n        self.onewire = OneWire(pin)\n        self.ds = DS18X20(self.onewire)\n        self.addr = self.scan()\n\n    def scan(self):\n        \"\"\"\n        Scans for OneWire devices and returns the address of the first device found.\n\n        Returns:\n            bytes: The address of the first OneWire device found.\n\n        Raises:\n            Exception: If no device is found.\n        \"\"\"\n        addresses = self.onewire.scan()\n        if not addresses:\n            raise Exception(\"No device found\")\n        return addresses[0]\n\n    def read_temp(self, with_scratch: bool = False):\n        \"\"\"\n        Reads the temperature from the DS18B20 sensor.\n\n        Args:\n            with_scratch (bool, optional): Whether to read the scratchpad data. Defaults to False.\n\n        Returns:\n            float or list: The temperature value or a list with temperature and scratchpad data.\n        \"\"\"\n        self.ds.convert_temp()\n        time.sleep_ms(750)  # type: ignore\n        if with_scratch:\n            return [self.ds.read_temp(self.addr), self.ds.read_scratch(self.addr)]\n        return self.ds.read_temp(self.addr)\n</code></pre>"},{"location":"DS18B20/#acca.DS18B20_OneWire.read_temp","title":"<code>read_temp(with_scratch=False)</code>","text":"<p>Reads the temperature from the DS18B20 sensor.</p> <p>Parameters:</p> Name Type Description Default <code>with_scratch</code> <code>bool</code> <p>Whether to read the scratchpad data. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <p>float or list: The temperature value or a list with temperature and scratchpad data.</p> Source code in <code>acca.py</code> <pre><code>def read_temp(self, with_scratch: bool = False):\n    \"\"\"\n    Reads the temperature from the DS18B20 sensor.\n\n    Args:\n        with_scratch (bool, optional): Whether to read the scratchpad data. Defaults to False.\n\n    Returns:\n        float or list: The temperature value or a list with temperature and scratchpad data.\n    \"\"\"\n    self.ds.convert_temp()\n    time.sleep_ms(750)  # type: ignore\n    if with_scratch:\n        return [self.ds.read_temp(self.addr), self.ds.read_scratch(self.addr)]\n    return self.ds.read_temp(self.addr)\n</code></pre>"},{"location":"DS18B20/#acca.DS18B20_OneWire.scan","title":"<code>scan()</code>","text":"<p>Scans for OneWire devices and returns the address of the first device found.</p> <p>Returns:</p> Name Type Description <code>bytes</code> <p>The address of the first OneWire device found.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If no device is found.</p> Source code in <code>acca.py</code> <pre><code>def scan(self):\n    \"\"\"\n    Scans for OneWire devices and returns the address of the first device found.\n\n    Returns:\n        bytes: The address of the first OneWire device found.\n\n    Raises:\n        Exception: If no device is found.\n    \"\"\"\n    addresses = self.onewire.scan()\n    if not addresses:\n        raise Exception(\"No device found\")\n    return addresses[0]\n</code></pre>"},{"location":"MCP3221_I2C/","title":"MCP3221","text":"<p>               Bases: <code>I2C_ACCA</code></p> <p>A class to interface with the MCP3221 analog-to-digital converter via I2C.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The I2C bus ID. Defaults to 1.</p> <code>1</code> <code>sda_pin</code> <code>Pin</code> <p>The pin used for SDA. Defaults to Pin(18).</p> <code>Pin(18)</code> <code>scl_pin</code> <code>Pin</code> <p>The pin used for SCL. Defaults to Pin(19).</p> <code>Pin(19)</code> <code>baudrate</code> <code>int</code> <p>The communication baud rate. Defaults to 100000.</p> <code>100000</code> Example <p>mcp3221 = MCP3221_I2C(1, Pin(18), Pin(19), 100000)</p> Source code in <code>acca.py</code> <pre><code>class MCP3221_I2C(I2C_ACCA):\n    \"\"\"\n    A class to interface with the MCP3221 analog-to-digital converter via I2C.\n\n    Args:\n        id (int, optional): The I2C bus ID. Defaults to 1.\n        sda_pin (Pin, optional): The pin used for SDA. Defaults to Pin(18).\n        scl_pin (Pin, optional): The pin used for SCL. Defaults to Pin(19).\n        baudrate (int, optional): The communication baud rate. Defaults to 100000.\n\n    Example:\n        mcp3221 = MCP3221_I2C(1, Pin(18), Pin(19), 100000)\n    \"\"\"\n    def __init__(self, id: int = 1, sda_pin: Pin = Pin(18), scl_pin: Pin = Pin(19), baudrate: int = 100000):\n        super().__init__(id, sda_pin, scl_pin, baudrate)\n\n    def read_sample(self, bytes_number: int = 2):\n        \"\"\"\n        Reads data from the MCP3221.\n\n        Args:\n            bytes_number (int, optional): The number of bytes to read. Defaults to 2.\n        \"\"\"\n        data = self.read(bytes_number)\n        return int.from_bytes(data, \"big\")\n</code></pre>"},{"location":"MCP3221_I2C/#acca.MCP3221_I2C.read_sample","title":"<code>read_sample(bytes_number=2)</code>","text":"<p>Reads data from the MCP3221.</p> <p>Parameters:</p> Name Type Description Default <code>bytes_number</code> <code>int</code> <p>The number of bytes to read. Defaults to 2.</p> <code>2</code> Source code in <code>acca.py</code> <pre><code>def read_sample(self, bytes_number: int = 2):\n    \"\"\"\n    Reads data from the MCP3221.\n\n    Args:\n        bytes_number (int, optional): The number of bytes to read. Defaults to 2.\n    \"\"\"\n    data = self.read(bytes_number)\n    return int.from_bytes(data, \"big\")\n</code></pre>"},{"location":"MCP3461_SPI/","title":"MCP3461 (SPI)","text":"<p>               Bases: <code>SPI_ACCA</code></p> <p>A class to interface with the MCP3461 analog-to-digital converter via SPI.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>int</code> <p>The SPI bus key. Defaults to 0.</p> <code>0</code> <code>baudrate</code> <code>int</code> <p>The communication baud rate. Defaults to 1000000.</p> <code>1000000</code> <code>sck</code> <code>Pin</code> <p>The pin used for SCK. Defaults to Pin(2).</p> <code>Pin(2)</code> <code>mosi</code> <code>Pin</code> <p>The pin used for MOSI. Defaults to Pin(3).</p> <code>Pin(3)</code> <code>miso</code> <code>Pin</code> <p>The pin used for MISO. Defaults to Pin(4).</p> <code>Pin(4)</code> <code>cs</code> <code>Pin</code> <p>The pin used for CS. Defaults to Pin(5).</p> <code>Pin(5)</code> Source code in <code>acca.py</code> <pre><code>class MCP3461_SPI(SPI_ACCA):\n    \"\"\"\n    A class to interface with the MCP3461 analog-to-digital converter via SPI.\n\n    Args:\n        key (int, optional): The SPI bus key. Defaults to 0.\n        baudrate (int, optional): The communication baud rate. Defaults to 1000000.\n        sck (Pin, optional): The pin used for SCK. Defaults to Pin(2).\n        mosi (Pin, optional): The pin used for MOSI. Defaults to Pin(3).\n        miso (Pin, optional): The pin used for MISO. Defaults to Pin(4).\n        cs (Pin, optional): The pin used for CS. Defaults to Pin(5).\n    \"\"\"\n\n    def __init__(\n        self,\n        key: int = 0,\n        baudrate: int = 1000000,\n        sck: Pin = Pin(2),\n        mosi: Pin = Pin(3),\n        miso: Pin = Pin(4),\n        cs: Pin = Pin(5),\n    ):\n        super().__init__(key, baudrate, sck, mosi, miso, cs)\n\n    def write(self, message: list):\n        \"\"\"\n        Writes a message to the MCP3461 via SPI.\n\n        Args:\n            message (list): The message to write.\n        \"\"\"\n        self.cs.value(0)\n        self.spi.write(bytearray(message))\n        self.cs.value(1)\n        time.sleep_us(1)  # type: ignore\n\n    def read(self):\n        \"\"\"\n        Reads data from the MCP3461 via SPI.\n\n        Returns:\n            bytes: The data read from the MCP3461.\n        \"\"\"\n        self.cs.value(0)\n\n        message = self.spi.read(6)\n        time.sleep_us(1)  # type: ignore\n        return message\n</code></pre>"},{"location":"MCP3461_SPI/#acca.MCP3461_SPI.read","title":"<code>read()</code>","text":"<p>Reads data from the MCP3461 via SPI.</p> <p>Returns:</p> Name Type Description <code>bytes</code> <p>The data read from the MCP3461.</p> Source code in <code>acca.py</code> <pre><code>def read(self):\n    \"\"\"\n    Reads data from the MCP3461 via SPI.\n\n    Returns:\n        bytes: The data read from the MCP3461.\n    \"\"\"\n    self.cs.value(0)\n\n    message = self.spi.read(6)\n    time.sleep_us(1)  # type: ignore\n    return message\n</code></pre>"},{"location":"MCP3461_SPI/#acca.MCP3461_SPI.write","title":"<code>write(message)</code>","text":"<p>Writes a message to the MCP3461 via SPI.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>list</code> <p>The message to write.</p> required Source code in <code>acca.py</code> <pre><code>def write(self, message: list):\n    \"\"\"\n    Writes a message to the MCP3461 via SPI.\n\n    Args:\n        message (list): The message to write.\n    \"\"\"\n    self.cs.value(0)\n    self.spi.write(bytearray(message))\n    self.cs.value(1)\n    time.sleep_us(1)  # type: ignore\n</code></pre>"},{"location":"MCP4706_I2C/","title":"MCP4706 (I2C)","text":"<p>               Bases: <code>I2C_ACCA</code></p> <p>A class to interface with the MCP4706 digital-to-analog converter via I2C.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The I2C bus ID. Defaults to 1.</p> <code>1</code> <code>sda_pin</code> <code>Pin</code> <p>The pin used for SDA. Defaults to Pin(19).</p> <code>Pin(18)</code> <code>scl_pin</code> <code>Pin</code> <p>The pin used for SCL. Defaults to Pin(18).</p> <code>Pin(19)</code> <code>baudrate</code> <code>int</code> <p>The communication baud rate. Defaults to 100000.</p> <code>100000</code> Example <p>mcp4706 = MCP4706_I2C(1, Pin(19), Pin(18), 100000)</p> Source code in <code>acca.py</code> <pre><code>class MCP4706_I2C(I2C_ACCA):\n    \"\"\"\n    A class to interface with the MCP4706 digital-to-analog converter via I2C.\n\n    Args:\n        id (int, optional): The I2C bus ID. Defaults to 1.\n        sda_pin (Pin, optional): The pin used for SDA. Defaults to Pin(19).\n        scl_pin (Pin, optional): The pin used for SCL. Defaults to Pin(18).\n        baudrate (int, optional): The communication baud rate. Defaults to 100000.\n\n    Example:\n        mcp4706 = MCP4706_I2C(1, Pin(19), Pin(18), 100000)\n    \"\"\"\n\n    def __init__(self, id: int = 1, sda_pin: Pin = Pin(18), scl_pin: Pin = Pin(19), baudrate: int = 100000):\n        super().__init__(id=id, sda_pin=sda_pin, scl_pin=scl_pin, baudrate=baudrate)\n\n    def set_value(self, MSB: int, LSB: int):\n        \"\"\"\n        Sets the value of the MCP4706 digital-to-analog converter.\n\n        Args:\n            MSB (int): The most significant byte of the value.\n            LSB (int): The least significant byte of the value.\n\n        Returns:\n            int: The result of the send operation.\n\n        Raises:\n            Exception: If there is an error setting the value.\n        \"\"\"\n        try:\n            return self.send(bytearray([MSB, LSB]))\n        except Exception as e:\n            print(f\"Failed to set value: {e}\")\n</code></pre>"},{"location":"MCP4706_I2C/#acca.MCP4706_I2C.set_value","title":"<code>set_value(MSB, LSB)</code>","text":"<p>Sets the value of the MCP4706 digital-to-analog converter.</p> <p>Parameters:</p> Name Type Description Default <code>MSB</code> <code>int</code> <p>The most significant byte of the value.</p> required <code>LSB</code> <code>int</code> <p>The least significant byte of the value.</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>The result of the send operation.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If there is an error setting the value.</p> Source code in <code>acca.py</code> <pre><code>def set_value(self, MSB: int, LSB: int):\n    \"\"\"\n    Sets the value of the MCP4706 digital-to-analog converter.\n\n    Args:\n        MSB (int): The most significant byte of the value.\n        LSB (int): The least significant byte of the value.\n\n    Returns:\n        int: The result of the send operation.\n\n    Raises:\n        Exception: If there is an error setting the value.\n    \"\"\"\n    try:\n        return self.send(bytearray([MSB, LSB]))\n    except Exception as e:\n        print(f\"Failed to set value: {e}\")\n</code></pre>"},{"location":"PWM/","title":"PWM","text":"<p>               Bases: <code>PWM</code></p> <p>A class to interface with PWM devices.</p> <p>Parameters:</p> Name Type Description Default <code>pin</code> <code>Pin</code> <p>The pin used for PWM. Defaults to Pin(17).</p> <code>Pin(17)</code> <code>freq</code> <code>int</code> <p>The PWM frequency. Defaults to 1000.</p> <code>1000</code> <code>duty</code> <code>int</code> <p>The PWM duty cycle. Defaults to 32768.</p> <code>32768</code> Example <p>pwm = PWM_ACCA(Pin(17), 1000, 32768)</p> Source code in <code>acca.py</code> <pre><code>class PWM_ACCA(PWM):\n    \"\"\"\n    A class to interface with PWM devices.\n\n    Args:\n        pin (Pin, optional): The pin used for PWM. Defaults to Pin(17).\n        freq (int, optional): The PWM frequency. Defaults to 1000.\n        duty (int, optional): The PWM duty cycle. Defaults to 32768.\n\n    Example:\n        pwm = PWM_ACCA(Pin(17), 1000, 32768)\n    \"\"\"\n\n    def __init__(self, pin: Pin = Pin(17), freq: int = 1000, duty: int = 32768):\n        self.pin = pin\n        self.pwm = PWM(pin)\n        self.pwm.freq(freq)\n        self.pwm.duty_u16(duty)\n</code></pre>"},{"location":"i2c_acca/","title":"I2C_ACCA Class","text":"<p>A class to interface with I2C devices.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The I2C bus ID.</p> required <code>sda_pin</code> <code>Pin</code> <p>The pin used for SDA.</p> required <code>scl_pin</code> <code>Pin</code> <p>The pin used for SCL.</p> required <code>baudrate</code> <code>int</code> <p>The communication baud rate.</p> required Example <p>dac = I2C_ACCA(0, Pin(8), Pin(9), 400000)</p> Source code in <code>acca.py</code> <pre><code>class I2C_ACCA:\n    \"\"\"\n    A class to interface with I2C devices.\n\n    Args:\n        id (int): The I2C bus ID.\n        sda_pin (Pin): The pin used for SDA.\n        scl_pin (Pin): The pin used for SCL.\n        baudrate (int): The communication baud rate.\n\n    Example:\n        dac = I2C_ACCA(0, Pin(8), Pin(9), 400000)\n    \"\"\"\n\n    def __init__(self, id: int, sda_pin, scl_pin, baudrate: int) -&gt; None:\n        self.id = id\n        self.sda_pin = sda_pin\n        self.scl_pin = scl_pin\n        self.baudrate = baudrate\n        self.i2c = I2C(id, sda=sda_pin, scl=scl_pin, freq=baudrate)\n        self.addr = self._get_addr()\n\n    def _get_addr(self):\n        \"\"\"\n        Scans for I2C devices and returns the address of the first device found.\n\n        Returns:\n            int: The address of the first I2C device found.\n\n        Raises:\n            Exception: If no device is found.\n        \"\"\"\n        addr = self.i2c.scan()\n        if not addr:\n            raise Exception(\"No device found\")\n        return addr[0]\n\n    def send(self, data, stop=True):\n        \"\"\"\n        Sends data to the I2C device.\n\n        Args:\n            data (bytes): The data to send.\n            stop (bool, optional): Whether to send a stop condition after the data. Defaults to True.\n\n        Returns:\n            int: The result of the writeto operation.\n\n        Raises:\n            Exception: If there is an error sending data.\n        \"\"\"\n        try:\n            return self.i2c.writeto(self.addr, data, stop)\n        except Exception as e:\n            print(f\"Error sending data: {e}\")\n            raise\n\n    def read(self, nbytes, stop=True):\n        \"\"\"\n        Reads data from the I2C device.\n\n        Args:\n            nbytes (int): The number of bytes to read.\n            stop (bool, optional): Whether to send a stop condition after reading. Defaults to True.\n\n        Returns:\n            bytes: The data read from the I2C device.\n\n        Raises:\n            Exception: If there is an error reading data.\n        \"\"\"\n        try:\n            data = self.i2c.readfrom(self.addr, nbytes, stop)\n            return data\n        except Exception as e:\n            print(f\"Error reading data: {e}\")\n            raise\n\n    def show_parameters(self) -&gt; None:\n        \"\"\"\n        Prints the I2C parameters.\n        \"\"\"\n        print(f\" ID: {self.id}\\nFrequency: {self.baudrate}\\nSCL pin: {self.scl_pin}\\nSDA pin: {self.sda_pin}\\nDevice address: {self.addr}\")\n</code></pre>"},{"location":"i2c_acca/#acca.I2C_ACCA.read","title":"<code>read(nbytes, stop=True)</code>","text":"<p>Reads data from the I2C device.</p> <p>Parameters:</p> Name Type Description Default <code>nbytes</code> <code>int</code> <p>The number of bytes to read.</p> required <code>stop</code> <code>bool</code> <p>Whether to send a stop condition after reading. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>bytes</code> <p>The data read from the I2C device.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If there is an error reading data.</p> Source code in <code>acca.py</code> <pre><code>def read(self, nbytes, stop=True):\n    \"\"\"\n    Reads data from the I2C device.\n\n    Args:\n        nbytes (int): The number of bytes to read.\n        stop (bool, optional): Whether to send a stop condition after reading. Defaults to True.\n\n    Returns:\n        bytes: The data read from the I2C device.\n\n    Raises:\n        Exception: If there is an error reading data.\n    \"\"\"\n    try:\n        data = self.i2c.readfrom(self.addr, nbytes, stop)\n        return data\n    except Exception as e:\n        print(f\"Error reading data: {e}\")\n        raise\n</code></pre>"},{"location":"i2c_acca/#acca.I2C_ACCA.send","title":"<code>send(data, stop=True)</code>","text":"<p>Sends data to the I2C device.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> <p>The data to send.</p> required <code>stop</code> <code>bool</code> <p>Whether to send a stop condition after the data. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>int</code> <p>The result of the writeto operation.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If there is an error sending data.</p> Source code in <code>acca.py</code> <pre><code>def send(self, data, stop=True):\n    \"\"\"\n    Sends data to the I2C device.\n\n    Args:\n        data (bytes): The data to send.\n        stop (bool, optional): Whether to send a stop condition after the data. Defaults to True.\n\n    Returns:\n        int: The result of the writeto operation.\n\n    Raises:\n        Exception: If there is an error sending data.\n    \"\"\"\n    try:\n        return self.i2c.writeto(self.addr, data, stop)\n    except Exception as e:\n        print(f\"Error sending data: {e}\")\n        raise\n</code></pre>"},{"location":"i2c_acca/#acca.I2C_ACCA.show_parameters","title":"<code>show_parameters()</code>","text":"<p>Prints the I2C parameters.</p> Source code in <code>acca.py</code> <pre><code>def show_parameters(self) -&gt; None:\n    \"\"\"\n    Prints the I2C parameters.\n    \"\"\"\n    print(f\" ID: {self.id}\\nFrequency: {self.baudrate}\\nSCL pin: {self.scl_pin}\\nSDA pin: {self.sda_pin}\\nDevice address: {self.addr}\")\n</code></pre>"},{"location":"spi_acca/","title":"SPI_ACCA Class","text":"<p>A class to interface with SPI devices.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>int</code> <p>The SPI bus key.</p> required <code>baudrate</code> <code>int</code> <p>The communication baud rate.</p> required <code>sck</code> <code>Pin</code> <p>The pin used for SCK.</p> required <code>mosi</code> <code>Pin</code> <p>The pin used for MOSI.</p> required <code>miso</code> <code>Pin</code> <p>The pin used for MISO.</p> required <code>cs</code> <code>Pin</code> <p>The pin used for CS.</p> required Example <p>dac = SPI_ACCA(0, 1000000, Pin(2), Pin(3), Pin(4), Pin(5))</p> Source code in <code>acca.py</code> <pre><code>class SPI_ACCA:\n    \"\"\"\n    A class to interface with SPI devices.\n\n    Args:\n        key (int): The SPI bus key.\n        baudrate (int): The communication baud rate.\n        sck (Pin): The pin used for SCK.\n        mosi (Pin): The pin used for MOSI.\n        miso (Pin): The pin used for MISO.\n        cs (Pin): The pin used for CS.\n\n    Example:\n        dac = SPI_ACCA(0, 1000000, Pin(2), Pin(3), Pin(4), Pin(5))\n    \"\"\"\n\n    def __init__(\n        self, key: int, baudrate: int, sck: Pin, mosi: Pin, miso: Pin, cs: Pin\n    ):\n        self.key = key\n        self.baudrate = baudrate\n        self.sck = sck\n        self.mosi = mosi\n        self.miso = miso\n        self.cs = cs\n        self.cs.init(Pin.OUT, value=1)\n\n        self.spi = SoftSPI(\n            baudrate=baudrate,\n            sck=self.sck,\n            mosi=self.mosi,\n            miso=self.miso,\n            polarity=0,\n            phase=0,\n        )\n\n    def show_parameters(self) -&gt; None:\n        \"\"\"\n        Prints the SPI parameters.\n        \"\"\"\n        print(\n            f\"Key: {self.key}\\nFrequency: {self.baudrate}\\nSCK pin: {self.sck}\\nMOSI pin: {self.mosi}\\nMISO pin: {self.miso}\\nCS pin: {self.cs}\"\n        )\n</code></pre>"},{"location":"spi_acca/#acca.SPI_ACCA.show_parameters","title":"<code>show_parameters()</code>","text":"<p>Prints the SPI parameters.</p> Source code in <code>acca.py</code> <pre><code>def show_parameters(self) -&gt; None:\n    \"\"\"\n    Prints the SPI parameters.\n    \"\"\"\n    print(\n        f\"Key: {self.key}\\nFrequency: {self.baudrate}\\nSCK pin: {self.sck}\\nMOSI pin: {self.mosi}\\nMISO pin: {self.miso}\\nCS pin: {self.cs}\"\n    )\n</code></pre>"}]}