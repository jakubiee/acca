{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AC/CA","text":"<p>Te</p>"},{"location":"i2c_acca/","title":"I2C_ACCA Class","text":"<p>A class to interface with I2C devices.</p>"},{"location":"i2c_acca/#attributes","title":"Attributes","text":"<ul> <li><code>id</code> (int): The I2C bus ID.</li> <li><code>sda_pin</code> (Pin): The pin used for SDA.</li> <li><code>scl_pin</code> (Pin): The pin used for SCL.</li> <li><code>baudrate</code> (int): The communication baud rate.</li> </ul>"},{"location":"i2c_acca/#methods","title":"Methods","text":""},{"location":"i2c_acca/#__init__","title":"<code>__init__</code>","text":"<p>Initializes the I2C_ACCA instance.</p> <p>Parameters:</p> <ul> <li> <p><code>id</code> (int): The I2C bus ID.</p> </li> <li> <p><code>sda_pin</code> (Pin): The pin used for SDA.</p> </li> <li> <p><code>scl_pin</code> (Pin): The pin used for SCL.</p> </li> <li> <p><code>baudrate</code> (int): The communication baud rate.</p> </li> </ul>"},{"location":"i2c_acca/#_get_addr","title":"<code>_get_addr</code>","text":"<p>Scans for I2C devices and returns the address of the first device found.</p> <p>Returns: - <code>int</code>: The address of the first I2C device found.</p> <p>Raises: - <code>Exception</code>: If no device is found.</p>"},{"location":"i2c_acca/#send","title":"<code>send</code>","text":"<p>Sends data to the I2C device.</p> <p>Parameters:</p> <ul> <li> <p><code>data</code>: The data to send.</p> </li> <li> <p><code>stop</code> (bool): Whether to send a stop condition after the data. Default is <code>True</code>.</p> </li> </ul> <p>Returns: - The result of the <code>writeto</code> operation.</p> <p>Raises: - <code>Exception</code>: If there is an error sending data.</p>"},{"location":"i2c_acca/#read","title":"<code>read</code>","text":"<p>Reads data from the I2C device.</p> <p>Parameters:</p> <ul> <li> <p><code>nbytes</code> (int): The number of bytes to read.</p> </li> <li> <p><code>stop</code> (bool): Whether to send a stop condition after reading. Default is <code>True</code>.</p> </li> </ul> <p>Returns: - The data read from the I2C device.</p> <p>Raises: - <code>Exception</code>: If there is an error reading data.</p>"},{"location":"i2c_acca/#show_parameters","title":"<code>show_parameters</code>","text":"<p>Prints the I2C parameters.</p> <p>Example:</p> <pre><code>i2c = I2C_ACCA(1, Pin(21), Pin(22), 400000)\ni2c.show_parameters()\n</code></pre>"},{"location":"pin/","title":"Pin Class","text":"<p><code>Pin</code> class, a simple class to emulate the <code>machine.Pin</code></p>"},{"location":"pin/#example","title":"Example","text":"<pre><code>from acca import Pin\n\nled = Pin(2, Pin.OUT, 1)\n</code></pre>"},{"location":"pin/#methods","title":"Methods","text":""},{"location":"pin/#__init__","title":"<code>__init__</code>","text":"<p>Initializes the Pin instance.</p> <p>Parameters:</p> <ul> <li><code>pin</code>: <code>int</code></li> <li> <p>Pin number</p> </li> <li> <p><code>mode</code>: <code>Optional[int]</code> (default: <code>None</code>)</p> </li> <li> <p>Pin mode (input or output)</p> </li> <li> <p><code>value</code>: <code>Optional[int]</code> (default: <code>None</code>)</p> </li> <li>Initial value of the pin</li> </ul>"},{"location":"pin/#mode","title":"<code>mode</code>","text":"<p>Sets or gets the mode of the pin.</p> <p>Parameters:</p> <ul> <li><code>mode</code>: <code>Optional[int]</code> (default: <code>None</code>)</li> <li>Pin mode to set (input or output)</li> </ul> <p>Returns:</p> <ul> <li>The <code>Pin</code> instance for method chaining</li> </ul>"},{"location":"pin/#value","title":"<code>value</code>","text":"<p>Sets or gets the value of the pin.</p> <p>Parameters:</p> <ul> <li><code>val</code>: <code>Optional[int]</code> (default: <code>None</code>)</li> <li>Value to set (0 or 1)</li> </ul> <p>Returns:</p> <ul> <li>The <code>Pin</code> instance for method chaining</li> </ul>"}]}